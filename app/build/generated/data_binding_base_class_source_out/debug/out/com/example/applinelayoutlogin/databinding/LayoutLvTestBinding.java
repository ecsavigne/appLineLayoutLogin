// Generated by view binder compiler. Do not edit!
package com.example.applinelayoutlogin.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.applinelayoutlogin.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LayoutLvTestBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final LinearLayout idLinlayLvTestCorrido;

  @NonNull
  public final LinearLayout idLinlayLvTestFijo;

  @NonNull
  public final LinearLayout idLinlayLvTestNum;

  @NonNull
  public final TextView textView;

  private LayoutLvTestBinding(@NonNull CardView rootView,
      @NonNull LinearLayout idLinlayLvTestCorrido, @NonNull LinearLayout idLinlayLvTestFijo,
      @NonNull LinearLayout idLinlayLvTestNum, @NonNull TextView textView) {
    this.rootView = rootView;
    this.idLinlayLvTestCorrido = idLinlayLvTestCorrido;
    this.idLinlayLvTestFijo = idLinlayLvTestFijo;
    this.idLinlayLvTestNum = idLinlayLvTestNum;
    this.textView = textView;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutLvTestBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutLvTestBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_lv_test, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutLvTestBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.id_linlay_lv_test_corrido;
      LinearLayout idLinlayLvTestCorrido = ViewBindings.findChildViewById(rootView, id);
      if (idLinlayLvTestCorrido == null) {
        break missingId;
      }

      id = R.id.id_linlay_lv_test_fijo;
      LinearLayout idLinlayLvTestFijo = ViewBindings.findChildViewById(rootView, id);
      if (idLinlayLvTestFijo == null) {
        break missingId;
      }

      id = R.id.id_linlay_lv_test_num;
      LinearLayout idLinlayLvTestNum = ViewBindings.findChildViewById(rootView, id);
      if (idLinlayLvTestNum == null) {
        break missingId;
      }

      id = R.id.textView;
      TextView textView = ViewBindings.findChildViewById(rootView, id);
      if (textView == null) {
        break missingId;
      }

      return new LayoutLvTestBinding((CardView) rootView, idLinlayLvTestCorrido, idLinlayLvTestFijo,
          idLinlayLvTestNum, textView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
